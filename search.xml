<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于FINALx</title>
    <url>/about/</url>
    <content><![CDATA[<h2 id="来小亮给他整个活"><a class="anchor" href="#来小亮给他整个活">#</a> 来，小亮给他整个活！</h2>
<p>草！走！忽略！ጿ ኈ ቼ ዽ ጿ</p>
]]></content>
  </entry>
  <entry>
    <title>6.4.0</title>
    <url>/lectures/6-4-0/</url>
    <content><![CDATA[<h1 id="updating"><a class="anchor" href="#updating">#</a> updating</h1>
]]></content>
      <categories>
        <category>数据结构与算法基础</category>
      </categories>
      <tags>
        <tag>缓慢更新系列</tag>
      </tags>
  </entry>
  <entry>
    <title>00.Binary Notes for programming</title>
    <url>/notes/0/</url>
    <content><![CDATA[<h1 id="ここは"><a class="anchor" href="#ここは">#</a> ここは...?</h1>
<p>二进制杂谈继承于 theme 建构者，用于记录自己的编程学习。</p>
<h2 id="cc-dev-c"><a class="anchor" href="#cc-dev-c">#</a> C/C++ -- Dev-C++</h2>
<p>为了大学能够有参加比赛的资格，正在苦练技术中，参考刘汝佳《算法竞赛入门经典》，目前进行到 &lt;树的递归遍历&gt; 一节。</p>
<h2 id="python-pycharm"><a class="anchor" href="#python-pycharm">#</a> Python -- Pycharm</h2>
<ul>
<li>
<p>执着于制作各种小工具，包括一些图像的批量简单处理。</p>
</li>
<li>
<p>正在学习并使用 django 写更便捷的博客，丰富 django 原生架构使用的 MVC 函数。hexo 这样生成静态页面的框架（我对 hexo 的初步认知）我觉得不是很好用。</p>
</li>
</ul>
<h2 id="java-adnroidstudio-eclipse"><a class="anchor" href="#java-adnroidstudio-eclipse">#</a> Java -- AdnroidStudio、eclipse</h2>
<ul>
<li>
<p>由于 JSP 体量太大，不适合再小型云服务器上部署，现在已经停止学习 JSP。<s>(其实就是摆烂了)</s></p>
</li>
<li>
<p>目前正在学习 Android 开发，目前学习到 SQLite 一节 (其实是因为太久没学，后面的搞忘了 (悲))</p>
</li>
</ul>
<h2 id="js-忘了"><a class="anchor" href="#js-忘了">#</a> JS -- 忘了</h2>
<ul>
<li>以前学过 html-js-css-php 轴，但是由于太久没碰差点连 html 常用标签都忘了。</li>
</ul>
]]></content>
      <categories>
        <category>二进制杂谈</category>
      </categories>
      <tags>
        <tag>init_notes</tag>
      </tags>
  </entry>
  <entry>
    <title>01.dfs和bfs在树中的使用</title>
    <url>/notes/1/</url>
    <content><![CDATA[<h1 id="dfs和bfs在树中的使用"><a class="anchor" href="#dfs和bfs在树中的使用">#</a> dfs 和 bfs 在树中的使用</h1>
<p>因为预言自己不会经常更新 notes（二进制杂谈），所以就打上了缓慢更新的 tag。。。</p>
<h2 id="bfs使用"><a class="anchor" href="#bfs使用">#</a> bfs 使用</h2>
<p>bfs 可以运用队列来存储当前结点的相邻结点，实现对相邻结点的遍历。对于存储当前结点来说，有很多方法可以使用，比如用数组、结构体 + 指针等，还可以将几者融合使用。</p>
<p>如果用数组表明了当前结点和相邻结点的关系的话，直接遍历数组下标就可以，此处略去不谈。</p>
<p>如果用队列的话，首先分为几个阶段：</p>
<ol>
<li>树中结点的存储</li>
<li>（外面套一层 while，看第 4 点）用 for 循环查找当前结点的相邻结点（存储方式不同则查找方式不同），使用 if 语句判断结点是否已经遍历、过界、不合题意（这是循环的出口），当相邻结点满足题意时<strong>创建</strong>该结点并<strong>添加到队列</strong>中</li>
<li>遍历当前结点的相邻结点后要 pop 当前结点</li>
<li>使用 while 循环，重复 2、3 直到队列中没有结点（即 while (!q.empty ()) 进行外层循环）</li>
</ol>
<h3 id="存储方式"><a class="anchor" href="#存储方式">#</a> 存储方式</h3>
<ol>
<li>只用数组：将这棵树的空结点补充出来，直到成为一个满二叉树，再用一个数组存储所有结点，但是会浪费很多资源用在存空结点。</li>
<li>只用数组：除了根节点以外，每个结点都用数组存储它的父结点，下标是结点位置。</li>
<li>只用结构体 + 指针：编程更复杂，但是访问速度比 “数组 + 下标” 快</li>
<li>只用结构体 + 指针（推荐）：除了根节点以外，每个结点都用一个 node * 变量存储它的父结点。</li>
<li>用两个数组（推荐）：用两个数组保存当前结点的左儿子和右儿子，两个数组的下标均为当前结点的位置，另外设置一个 cnt 变量保存总结点数，每次新增结点时 cnt++</li>
<li>结构体 + 指针 + 一个数组：用一个静态申请内存的数组保存结点的指针，但是用结构体 + 指针访问当前结点的左儿子、右儿子，用一个 cnt 记录总结点数，添加结点时可以直接用一个结点指针指向数组中的一块区域（node * u = &amp;node [++cnt]），然后进行初始化结点。好处是访问速度超级无敌快，坏处是静态申请内存的数组用过的内存<strong>无法重用</strong>，算法竞赛中可能没有问题，但是实际开发中容易内存溢出</li>
</ol>
<h3 id="内存溢出的解决步骤"><a class="anchor" href="#内存溢出的解决步骤">#</a> 内存溢出的解决步骤</h3>
<ol>
<li>用一个空闲队列（也就是 memory pool）来维护静态申请的数组，每次新增加结点时，就找已经空闲内存（当结点生成后又被删除，此时这个内存叫空闲内存）来保存这个结点</li>
<li>初始化内存池，即在队列中 push 所有结点的地址，在这之前不应该创建结点</li>
<li>新增结点，用 front () 在内存池找一块地址给新的结点，执行初始化结点，然后 pop 出这个地址（因为这个地址已经不空闲了）</li>
<li>删除结点，将删除结点的地址重新 push 进内存池</li>
</ol>
<h2 id="dfs使用"><a class="anchor" href="#dfs使用">#</a> dfs 使用</h2>
<p>dfs 在此处是一个函数，运用递归实现递去和回归，使用 dfs 有几个阶段：</p>
<ol>
<li>在第一次使用 dfs 的地方（函数之外）添加递归入口，因为一般第一次使用 dfs 会有一些输入输出的要求，结合题意使用</li>
<li>在函数中，添加递归出口，在不满足一定条件（使用 if 语句判断结点是否已经遍历、过界、不合题意）时，直接 return</li>
<li>在函数中，添加递归主体，即对当前结点（当前子树的根）做一定操作（根）</li>
<li>在函数中，添加递归方式，即在 dfs 函数中调用 dfs 函数，参数传入左右子结点（左 / 右）</li>
<li>注：3、4 点的顺序根据先序（根左右）、中序（左根右）、后序（左右根）的不同有差别。</li>
</ol>
]]></content>
      <categories>
        <category>二进制杂谈</category>
      </categories>
      <tags>
        <tag>缓慢更新系列</tag>
      </tags>
  </entry>
  <entry>
    <title>02.dfs和bfs中的小技巧</title>
    <url>/notes/2/</url>
    <content><![CDATA[<h1 id="一些小技巧"><a class="anchor" href="#一些小技巧">#</a> 一些小技巧</h1>
<h2 id="1表示迷宫中上左下右的移动增量"><a class="anchor" href="#1表示迷宫中上左下右的移动增量">#</a> 1. 表示迷宫中上左下右的移动增量</h2>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> dy<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> dx<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="2迷宫中遍历以当前节点为中心的九宫格但不遍历当前结点"><a class="anchor" href="#2迷宫中遍历以当前节点为中心的九宫格但不遍历当前结点">#</a> 2. 迷宫中遍历以当前节点为中心的九宫格，但不遍历当前结点</h2>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> dx<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>dx<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>dx<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>dy<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>dy<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>dy<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>		<span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>dy<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//if 语句是为了除开当前结点</span></pre></td></tr><tr><td data-num="4"></td><td><pre>			<span class="token comment">//TODO</span></pre></td></tr><tr><td data-num="5"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="3用一个数组dis表示初始位置到该坐标的最短路程d"><a class="anchor" href="#3用一个数组dis表示初始位置到该坐标的最短路程d">#</a> 3. 用一个数组 dis 表示初始位置到该坐标的最短路程 d</h2>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 用一个数组 dis 表示初始位置到该坐标的最短路程 d，因为每经过一个结点时就要求一个 d 放到数组里面</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 所以该数组还可以表示当前点是否已经遍历过</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> dis<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a 和 b 是迷宫的长宽，c.. 之后的维度用于存放其他信息（比如到到该结点时的方向）</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//bfs 或 dfs 主体中当结点被遍历到时</span></pre></td></tr><tr><td data-num="7"></td><td><pre>dis<span class="token punctuation">[</span>next<span class="token operator">-></span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>next<span class="token operator">-></span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="4推荐用数组结构体数组结构体中的变量存放每个结点的父结点"><a class="anchor" href="#4推荐用数组结构体数组结构体中的变量存放每个结点的父结点">#</a> 4. 推荐用数组 / 结构体数组 / 结构体中的变量存放每个结点的父结点</h2>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 如果在 bfs 中，你用数组或者结构体数组或者结构体中的变量存放每个结点的父结点（除了根）：</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 因为所有结点都只存了它的父结点，所以要获取整个路径就要从终点回溯到起点，同时倒序存放到 vector 中</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 最后用一个循环倒序输出（倒序 + 倒序 = 正序）</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 结构体.ver：</span></pre></td></tr><tr><td data-num="5"></td><td><pre>vector<span class="token operator">&lt;</span>node<span class="token operator">*</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token comment">// 倒序存放路径</span></pre></td></tr><tr><td data-num="6"></td><td><pre>path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ed 是最后一个结点的指针</span></pre></td></tr><tr><td data-num="7"></td><td><pre>node<span class="token operator">*</span> pre <span class="token operator">=</span> ed<span class="token operator">-></span>parent<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>pre<span class="token operator">-></span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token operator">-></span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">// 一定要用 dis 来判断是否到达根节点</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	pre <span class="token operator">=</span> pre<span class="token operator">-></span>parent<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 结构体数组.ver：</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vector<span class="token operator">&lt;</span>node<span class="token operator">*</span><span class="token operator">></span> path<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//now 是最后一个结点的指针</span></pre></td></tr><tr><td data-num="18"></td><td><pre>now <span class="token operator">=</span> parent<span class="token punctuation">[</span>now<span class="token operator">-></span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token operator">-></span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>now<span class="token operator">-></span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token operator">-></span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">// 一定要用 dis 来判断是否到达根节点</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	now<span class="token operator">=</span>parent<span class="token punctuation">[</span>now<span class="token operator">-></span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token operator">-></span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="5一些常见的输入格式要求"><a class="anchor" href="#5一些常见的输入格式要求">#</a> 5. 一些常见的输入格式要求</h2>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//1. 如果给了有 T 个实验组</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token comment">//TODO</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//2. 如果在实验组结束的时候给一个结束标识 0：</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%s%d%d...（假设一共有10个）"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//TODO</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 如果不知道有几个实验组，又没给结束标识：</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%s%d%d...（假设一共有10个）"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token comment">//TODO</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>二进制杂谈</category>
      </categories>
      <tags>
        <tag>缓慢更新系列</tag>
      </tags>
  </entry>
  <entry>
    <title>萌娘百科记录 (updating)</title>
    <url>/logging/log_for_moegirl/</url>
    <content><![CDATA[<p>注：用于记录自己正在维护或维护过的条目，但是因为太懒了所以不懒的时候我再更新吧 XD</p>
<p>具体请见<span class="exturl" data-url="aHR0cHM6Ly96aC5tb2VnaXJsLm9yZy5jbi9Vc2VyOkZJTkFM">个人主页</span>和<span class="exturl" data-url="aHR0cHM6Ly96aC5tb2VnaXJsLm9yZy5jbi9TcGVjaWFsOiVFNyU5NCVBOCVFNiU4OCVCNyVFOCVCNCVBMSVFNyU4QyVBRS9GSU5BTA==">贡献列表</span></p>
]]></content>
      <categories>
        <category>FINALx的记录本</category>
      </categories>
      <tags>
        <tag>缓慢更新系列</tag>
      </tags>
  </entry>
  <entry>
    <title>04.暴力求解法--生成（枚举）排列2</title>
    <url>/notes/4/</url>
    <content><![CDATA[<h1 id="生成可重集的排列"><a class="anchor" href="#生成可重集的排列">#</a> 生成可重集的排列</h1>
<div class="note warning">
<p>注意，这里只说了是可重集，但未限定它是连续还是非连续的。</p>
</div>
<p>对应紫书 7.2.2，这个代码也很抽象，真就从入门到弃坑呗（恼）</p>
<div class="note info">
<p>在这篇文章中，我使用一个给定的数组 P，P 中的元素可能连续也可能非连续（这不影响排列的生成），并且 P 中的元素可以重复，比如 (1,1,1)。再给出 P 的元素个数为 n，要求按字典序生成 P 的全排列。</p>
</div>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>P<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">void</span> <span class="token function">printAns</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span>A<span class="token punctuation">,</span><span class="token keyword">int</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//pos 依旧表示当前递归到第几位 </span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归出口</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>		<span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	</pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token comment">// 用来写入数字的循环，遍历 1~n</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 对每个结点来说，一开始都有 n 个分支</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        </pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// 重点：(i 的含义：) 只会考虑相同元素的第一个，第一个元素由于没有前面的元素， 所以应当取走。</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 重点：(P [i]!=P [i-1] 的含义：) 所以与前一个相同的元素应当被忽略。 </span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">||</span><span class="token punctuation">(</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>P<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 当然，如果写入数字的范围是 0~n，需要把 i 换成！i，如果 i=0，那么 i 此时是放最前面的，再前面就没有元素了</span></pre></td></tr><tr><td data-num="22"></td><td><pre>			</pre></td></tr><tr><td data-num="23"></td><td><pre>			<span class="token comment">//c1 表示 P [i] 中目前已经在答案数组中出现的次数，c2 表示 P [i] 在整个数组中出现的次数</span></pre></td></tr><tr><td data-num="24"></td><td><pre>			<span class="token keyword">int</span> c1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>c2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>			</pre></td></tr><tr><td data-num="26"></td><td><pre>			<span class="token comment">// 初始数组中从 x [0] 遍历到 x [cur]，统计 c1</span></pre></td></tr><tr><td data-num="27"></td><td><pre>			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cur<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> c1<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>			<span class="token comment">// 答案数组中从 a [0] 遍历到 a [n]，统计 c2</span></pre></td></tr><tr><td data-num="29"></td><td><pre>			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>P<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> c2<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            </pre></td></tr><tr><td data-num="31"></td><td><pre>            </pre></td></tr><tr><td data-num="32"></td><td><pre>            </pre></td></tr><tr><td data-num="33"></td><td><pre>		 	<span class="token comment">// 当 c1&lt;c2 时，A (答案) 数组出现的 P [i] 次数少于 a 数组，说明还有部分 P [i] 没有放到答案数组中，即还有部分 P [i] 没有被遍历</span></pre></td></tr><tr><td data-num="34"></td><td><pre>			<span class="token keyword">if</span> <span class="token punctuation">(</span>c1<span class="token operator">&lt;</span>c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 相当于判断未遍历</span></pre></td></tr><tr><td data-num="35"></td><td><pre>				A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>				<span class="token function">P</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>A<span class="token punctuation">,</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将光标移到下一位</span></pre></td></tr><tr><td data-num="37"></td><td><pre>				<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	<span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>	<span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="44"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="45"></td><td><pre>    </pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">// 排序后可以得到最小的排列</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment">// 假如排序后：(1,2,2,3,7...)，这也可以便于之后检测相同的元素</span></pre></td></tr><tr><td data-num="48"></td><td><pre>	<span class="token function">sort</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span>P<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="49"></td><td><pre>	</pre></td></tr><tr><td data-num="50"></td><td><pre>	<span class="token function">printAns</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>A<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="51"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="下一个排列-stl-next_permutation-推荐"><a class="anchor" href="#下一个排列-stl-next_permutation-推荐">#</a> 下一个排列（ STL:  next_permutation () ）（推荐）</h2>
<div class="note info">
<p>由于卡片功能可能还有 bug，放一个 info 提示一下：点击下方名称，可以切换到对应的标签卡</p>
</div>
<div class="tab" data-id="id1" data-title="函数介绍">
<p><span class="label info">逻辑</span><br />
根据传入的一个排列，按字典序变化，求出它的下一个排列</p>
<p><span class="label info">用法</span><br />
假定有一个 int P [maxn] 存放其中一个排列，P 的元素个数为 n，next_permutation (P,P+n);</p>
<p><span class="label info">返回值</span></p>
<ol>
<li>若当前序列为（132）时，则调用一次 next_permutation () 函数后，得到（213）。由于字典序递增，则此时 next_permutation () 函数的返回值为 true。</li>
<li>若当前序列为（321）时，则调用一次 next_permutation () 函数后，得到（123）。由于字典序递减，则此时 next_permutation () 函数的返回值为 false。</li>
</ol>
<p><span class="label info">特点 1</span><br />
 字典序最大的排列，比如 (4,3,2,1) 的下一个排列就是最初始的排列 (1,2,3,4)，该排列字典序最小，此时因为字典序变小，函数也会返回 false</p>
<p>[特点 2]]{.label .info} n 个数的全排列 A (nn)=n*(n-1)*...<em>2</em>1=n!</p>
</div>
<div class="tab" data-id="id1" data-title="函数实例">
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> P<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token function">sort</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span>P<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 排序后可以得到最小的排列</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	</pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token comment">// 很久没用 do...while 了，它至少会执行一次</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">next_permutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断的时候就同时执行</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	</pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>二进制杂谈</category>
      </categories>
      <tags>
        <tag>缓慢更新系列</tag>
      </tags>
  </entry>
  <entry>
    <title>05.暴力求解法--生成（枚举）子集</title>
    <url>/notes/5/</url>
    <content><![CDATA[<h1 id="生成任意一个排列的子集"><a class="anchor" href="#生成任意一个排列的子集">#</a> 生成任意一个排列的子集</h1>
<p>对应紫书的 7.3.1~7.3.3</p>
<div class="note info">
<p>出于简单考虑，本节内容的排列是不可重集， <mark>且为 0~n</mark> 。</p>
</div>
<p>前两个方法写法较为复杂、代码量大，且无法显著地加快运行时间，不建议使用。</p>
<h2 id="1增量构造法"><a class="anchor" href="#1增量构造法">#</a> 1. 增量构造法</h2>
<p>来自<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW5xaTE1NTcxL2FydGljbGUvZGV0YWlscy84ODY4MDU0">别人博客</span> 的实现：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/* 递归输出 n 以内所有的子集，其中 cur 为当前下标，初始值 0*/</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">void</span> <span class="token function">print_subset</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cur<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">// 每次递归输出当前子集，靠它来最后输出上一层指定的子集</span></pre></td></tr><tr><td data-num="11"></td><td><pre>		cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">// 以行分隔</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	</pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token comment">// 找到当前子集首个值，因为按字典顺序输出，所以每次找到最小的元素，cur>0 则 minElem=a [cur-1]+1, 否则为 0</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token keyword">int</span> minElem <span class="token operator">=</span> cur<span class="token operator">?</span>a<span class="token punctuation">[</span>cur<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre> </pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token comment">// 从子集第一个值开始遍历，先不看下面的 print_subset (n,a,cur+1); 但看这 for 循环，</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token comment">// 可知是将子集第一个值从头往后依次赋值为 minElem-n-1. 每次第一个值变化后递归设置下一个值 (相当于下一层的第一个值)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>minElem<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		a<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">// 当前层子集第一个值</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token comment">//cur+1 表示当前层值设置完毕，开始递归下一层，和前面步骤一样。</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token comment">// 到达最后一层结束后 return 到上一层，然后 i++,a [cur] 的值 (首元素) 改变，又反复递归下一层...</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token function">print_subset</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre> </pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	<span class="token keyword">int</span> n <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>		<span class="token function">print_subset</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="note info">
<p>虽然这个算法不用深究，数组 A 是答案数组，即要求的子集，但是由于数组 A 的长度并不是固定的，因此每次递归后都要输出数组 A 的值。同时这段代码中 <mark>不用显式指定一个递归出口</mark></p>
</div>
<h2 id="2位向量法"><a class="anchor" href="#2位向量法">#</a> 2. 位向量法</h2>
<p>思路不难，本质上一棵二叉解答树（类似于哈夫曼树，可以用来构造哈夫曼密码），从根开始，同样用一个 cur 来表示当前填数的位置，约定向左走的话，cur 指向的当前位置为 0，向右走为 1。</p>
<p>当然这里没有必要真的规定向左走，因为我们不需要知道最终走向了哪个叶子结点（但是哈曼夫树需要，因为我们不仅生成密码，也同样需要树来解码，于是就需要用 0、1 判断最终到底去了哪个叶子结点），实际上这里每个结点只有 0、1 两个分支，可以和以前一样用 for 循环遍历这两个分支来分别递归。</p>
<p>eg. 现在有一个初始数组 P=(2,3,5,8)，于是这棵解答树的深度就是 4，如果路径是：左右右左，那么最终得到的集合是 (0,1,1,0)，这个叫 <mark>位向量</mark> ，如果对应位数上的值为 1，那么答案数组中就使用初始数组中对应位数的数字，也就是说，此时的答案数组就是 (3,5)</p>
<p>来自<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81NTgzNTE3NS9hcnRpY2xlL2RldGFpbHMvMTE3MDg0MjA2">别人博客</span> 的实现：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">print_subset</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>B<span class="token punctuation">,</span><span class="token keyword">int</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 由于我们这里的思路是构造一个位向量，所有 cur 表示当前构造位向量的进度</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	</pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token comment">//cur 等于 n 时，即代表位向量构造完全了，return 表示递归终止 </span></pre></td></tr><tr><td data-num="6"></td><td><pre>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cur<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>			<span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="8"></td><td><pre>			</pre></td></tr><tr><td data-num="9"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>			<span class="token keyword">return</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	B<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">print_subset</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>B<span class="token punctuation">,</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 约定向左走的话，cur 指向的当前位置为 0</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	B<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">print_subset</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>B<span class="token punctuation">,</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 向右走为 1</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token keyword">int</span> n<span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">print_subset</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>B<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可惜的是，我并不常用这个方法，更喜欢使用更简洁的方法 3，但是方法 2 的思路建议去了解一下，也可以趁机去学一下哈夫曼树</p>
<h2 id="3二进制法-以位向量法为基础"><a class="anchor" href="#3二进制法-以位向量法为基础">#</a> 3. 二进制法 -- 以位向量法为基础</h2>
<p>思路：在方法 2 中，我们使用一颗解答树来得到一个位向量，但其实位向量就是一种二进制数，比如之前的 (0,1,1,0)= 二进制 0110 = 十进制 6。4 位的位向量的最小值 (0,0,0,0)= 十进制 0，最大值 (1,1,1,1)= 十进制 15。</p>
<p>那么 n 位的位向量的最大值（所有位都是 1）对应的十进制就是 2^n-1 ，于是我们可以不通过树来生成位向量，而是直接从十进制 0 遍历到十进制 2<sup>n-1</sup>，共 2<sup>n</sup> 个数，把每次遍历的十进制转换成二进制，来生成位向量。</p>
<div class="note info">
<p>当然这里并不是把所有的位向量全部构造完了才开始求子集，而是每次递去到一个结点，在添加 1/0 前，先通过位向量求子集，然后输出，最后才在 cur 处添加数字。</p>
</div>
<p>生成 0~n 的子集实现（博客参见位向量法中的链接）：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">print_subset</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 遍历 [0,2^n-1]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	</pre></td></tr><tr><td data-num="5"></td><td><pre>		<span class="token keyword">int</span> s<span class="token operator">=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 将十进制转成二进制</span></pre></td></tr><tr><td data-num="7"></td><td><pre>			<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>			s<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token keyword">int</span> n<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">print_subset</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>将十进制转为二进制有两种方法，见<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNTkxMjc0OTk=">知乎</span></p>
<h2 id="题外话集合的交-并-补-对称差"><a class="anchor" href="#题外话集合的交-并-补-对称差">#</a> 题外话：集合的交、并、补、对称差</h2>
<p>对称差：数学上，两个集合的对称差是只属于其中一个集合，而 <mark>不属于另一个集合</mark> 的元素组成的集合。 集合论中的这个运算相当于布尔逻辑中的 <mark>异或</mark> 运算。</p>
<p>如果将十进制集合转换为位向量，再转换为二进制。<br />
全集 ={0,1,2,3,4}<br />
A={1,2,4}-&gt;{1,0,1,1,0}-&gt;10110；B={2,3}-&gt;{0,1,1,0,0}-&gt;01100</p>
<p>于是有：<br />
<span class="label info">空集</span> 0</p>
<p><span class="label info">全集</span> {0,1,2,3,...,n-1,n}= 十进制 (1&lt;&lt;n)-1 = 二进制 11111111....(n 个 1)，一般用 ALL_BITS 表示</p>
<p><span class="label info">A 和 B 的交</span> A &amp; B</p>
<p><span class="label info">A 和 B 的并</span> A | B</p>
<p><span class="label info">A 的补</span> ALL_BITS ^ A={0,3,5,...} 或者 ALL_BITS-A，但速度要慢点</p>
<p><span class="label info">A 和 B 的对称差</span> A ^ B</p>
]]></content>
      <categories>
        <category>二进制杂谈</category>
      </categories>
      <tags>
        <tag>缓慢更新系列</tag>
      </tags>
  </entry>
  <entry>
    <title>03.暴力求解法--生成（枚举）排列1</title>
    <url>/notes/3/</url>
    <content><![CDATA[<h1 id="生成连续的不可重集的排列"><a class="anchor" href="#生成连续的不可重集的排列">#</a> 生成连续的不可重集的排列</h1>
<p>对应紫书的 7.2.1 节，代码有点难看懂。。（悲）</p>
<p>rt，假设这个集合的连续区间在 1~n，并且假设生成的集合形式为 (x,y,z,...)，x、y、z... 都分别符合这个连续区间，<mark>且它们不能重复</mark>，那么这些集合叫做连续的 <mark>不可重</mark>集</p>
<div class="note info">
<p>而现在问题是：<br />
给一个长度为 n 的集合，要求按字典序生成集合的全排列。</p>
</div>
<p>前置知识是解答树，dfs 遍历解答树的格式 1 如下：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span> A<span class="token punctuation">,</span><span class="token keyword">int</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//A 数组就是当前生成的排列</span></pre></td></tr><tr><td data-num="2"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归出口</span></pre></td></tr><tr><td data-num="3"></td><td><pre>		输出A的内容</pre></td></tr><tr><td data-num="4"></td><td><pre>		<span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 用来写入数字的循环，遍历 1~n</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 对每个结点来说，一开始都有 n 个分支</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	</pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token keyword">int</span> ok<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 如果要保证数组的不可重性，那么要在数组 A 中遍历查找是否已经填过数字 i，如果填过则 ok=0，就代表这个数字 i 不能再被填写了</span></pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 判重</span></pre></td></tr><tr><td data-num="12"></td><td><pre>			<span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">)</span> ok<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>			</pre></td></tr><tr><td data-num="14"></td><td><pre>			<span class="token keyword">if</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 如果不重复</span></pre></td></tr><tr><td data-num="15"></td><td><pre>				A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>				<span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>A<span class="token punctuation">,</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 每当递归深入一层时，cur 就会 + 1，这样光标才能到下一位，进行填数</span></pre></td></tr><tr><td data-num="17"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>当然也可以用 vis [maxn] 数组来判重，dfs 遍历解答树的格式 2 如下（推荐）：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span> A<span class="token punctuation">,</span><span class="token keyword">int</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//A 数组就是当前生成的排列</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归出口</span></pre></td></tr><tr><td data-num="5"></td><td><pre>		输出A的内容</pre></td></tr><tr><td data-num="6"></td><td><pre>		<span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">// 用来写入数字的循环，遍历 1~n</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 对每个结点来说，一开始都有 n 个分支</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		</pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token comment">// 如果需要生成的组合内元素要不重复，则需要用 vis [] 判重</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>			A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>			vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>			<span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>A<span class="token punctuation">,</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 每当递归深入一层时，cur 就会 + 1，这样光标才能到下一位，进行填数</span></pre></td></tr><tr><td data-num="16"></td><td><pre>			vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 重点：因为两个排列的 vis [] 不一样，因此在一个排列写完后回溯时，要将 vis [] 归零</span></pre></td></tr><tr><td data-num="17"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>用格式 1 来生成 1~n 的全排列，代码如下：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">print_permutation</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span> A<span class="token punctuation">,</span><span class="token keyword">int</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//cur 是光标，从集合的第一位开始，指示添加数字时的当前位置；A 数组就是生成的排列</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 递归出口</span></pre></td></tr><tr><td data-num="4"></td><td><pre>		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token comment">// 用来写入数字的循环，遍历 1~n</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 对每个结点来说，一开始都有 n 个分支</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    </pre></td></tr><tr><td data-num="12"></td><td><pre>    	<span class="token keyword">int</span> ok<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cur<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 判重</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    		<span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">)</span> ok<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="15"></td><td><pre>    	<span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>    	</pre></td></tr><tr><td data-num="17"></td><td><pre>    	<span class="token keyword">if</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 如果不重复</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    		A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    		<span class="token function">print_permutation</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>A<span class="token punctuation">,</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 递归，将光标移向数组下一位</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><span class="label success">⛽️总结↓</span></p>
<ol>
<li>如果一棵树的度均相同（二叉树、四叉树...），那么它的格式和 dfs 二叉树类似；</li>
<li>如果一棵树的度数随着深度变化会出现至少一次变化（走迷宫、解答树、连通块...），那么判断是否能继续递归（判重、判过界、判已遍历...）的代码就关系到度数的变化。</li>
<li>很显然，在生成全排列时，判断是否能继续递归（这里是判重）的代码要多一点，因为它是一棵解答树。</li>
</ol>
]]></content>
      <categories>
        <category>二进制杂谈</category>
      </categories>
      <tags>
        <tag>缓慢更新系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/notes/hello_world/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p>
<h2 id="quick-start"><a class="anchor" href="#quick-start">#</a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="anchor" href="#create-a-new-post">#</a> Create a new post</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo new <span class="token string">"My New Post"</span></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p>
<h3 id="run-server"><a class="anchor" href="#run-server">#</a> Run server</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p>
<h3 id="generate-static-files"><a class="anchor" href="#generate-static-files">#</a> Generate static files</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p>
<h3 id="deploy-to-remote-sites"><a class="anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span></p>
]]></content>
      <categories>
        <category>二进制杂谈</category>
      </categories>
      <tags>
        <tag>init</tag>
      </tags>
  </entry>
  <entry>
    <title>P1035 [NOIP2002 普及组] 级数求和 题解</title>
    <url>/solutions/P1035%20%5BNOIP2002%20%E6%99%AE%E5%8F%8A%E7%BB%84%5D%20%E7%BA%A7%E6%95%B0%E6%B1%82%E5%92%8C%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p1035-noip2002-普及组-级数求和-题解"><a class="anchor" href="#p1035-noip2002-普及组-级数求和-题解">#</a> P1035 [NOIP2002 普及组] 级数求和 题解</h1>
<p>继续复健</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token keyword">double</span> sum<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    cin<span class="token operator">>></span>k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        sum<span class="token operator">=</span>sum<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span>k<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>普及组</tag>
      </tags>
  </entry>
  <entry>
    <title>P1089 [NOIP2004 提高组] 津津的储蓄计划 题解</title>
    <url>/solutions/P1089%20%5BNOIP2004%20%E6%8F%90%E9%AB%98%E7%BB%84%5D%20%E6%B4%A5%E6%B4%A5%E7%9A%84%E5%82%A8%E8%93%84%E8%AE%A1%E5%88%92%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p1089-noip2004-提高组-津津的储蓄计划-题解"><a class="anchor" href="#p1089-noip2004-提高组-津津的储蓄计划-题解">#</a> P1089 [NOIP2004 提高组] 津津的储蓄计划 题解</h1>
<p>只能说有些暴躁了，这么水的题，我硬是卡了好久，一会儿是没看清题意，一会儿是手误，一会儿是题意理解错误。或许这就是我数学差的原因吧（怒），算了等会复习下圆锥曲线吧（逃</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">12</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        m<span class="token operator">+=</span><span class="token number">300</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        cin<span class="token operator">>></span>temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">-</span>temp<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">-</span>temp<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>m<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">-</span>temp<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        m<span class="token operator">-=</span>temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">*</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="14"></td><td><pre>    m<span class="token operator">+=</span>s<span class="token operator">*</span><span class="token number">1.2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>提高组</tag>
      </tags>
  </entry>
  <entry>
    <title>P1075 [NOIP2012 普及组] 质因数分解 题解</title>
    <url>/solutions/P1075%20%5BNOIP2012%20%E6%99%AE%E5%8F%8A%E7%BB%84%5D%20%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p1075-noip2012-普及组-质因数分解-题解"><a class="anchor" href="#p1075-noip2012-普及组-质因数分解-题解">#</a> P1075 [NOIP2012 普及组] 质因数分解 题解</h1>
<p>是因为过 12:00 了么，遇到的题越来越水了。。</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    cin<span class="token operator">>></span>a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> ans<span class="token operator">=</span>i<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    ans<span class="token operator">=</span>a<span class="token operator">/</span>ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>普及组</tag>
      </tags>
  </entry>
  <entry>
    <title>P1307 [NOIP2011 普及组] 数字反转 题解</title>
    <url>/solutions/P1307%20%5BNOIP2011%20%E6%99%AE%E5%8F%8A%E7%BB%84%5D%20%E6%95%B0%E5%AD%97%E5%8F%8D%E8%BD%AC%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p1307-noip2011-普及组-数字反转-题解"><a class="anchor" href="#p1307-noip2011-普及组-数字反转-题解">#</a> P1307 [NOIP2011 普及组] 数字反转 题解</h1>
<p>虽然是开了数组，但是果然还是用 stack 比较方便（</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">fill</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> n<span class="token operator">*=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//abs </span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        n<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="14"></td><td><pre>        cnt<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>cnt<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>cnt<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        ans<span class="token operator">+=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        j<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">*</span>flag<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>​```c<span class="token operator">++</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>普及组</tag>
      </tags>
  </entry>
  <entry>
    <title>P1980 [NOIP2013 普及组] 计数问题 题解</title>
    <url>/solutions/P1980%20%5BNOIP2013%20%E6%99%AE%E5%8F%8A%E7%BB%84%5D%20%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p1980-noip2013-普及组-计数问题-题解"><a class="anchor" href="#p1980-noip2013-普及组-计数问题-题解">#</a> P1980 [NOIP2013 普及组] 计数问题 题解</h1>
<p>目前代码复健中，对我这种业余不打比赛的人来说，现在已经足够了 www（</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> aim<span class="token punctuation">,</span>n<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    cin<span class="token operator">>></span>n<span class="token operator">>></span>aim<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">int</span> swap<span class="token operator">=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>swap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>swap<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span>aim<span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            swap<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>普及组</tag>
      </tags>
  </entry>
  <entry>
    <title>P1420 最长连号 题解</title>
    <url>/solutions/P1420%20%E6%9C%80%E9%95%BF%E8%BF%9E%E5%8F%B7%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p1420-最长连号-题解"><a class="anchor" href="#p1420-最长连号-题解">#</a> P1420 最长连号 题解</h1>
<p>虽然题有点水，但是我还是要打 www</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    cin<span class="token operator">>></span>a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        cin<span class="token operator">>></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>cnt<span class="token punctuation">)</span> max<span class="token operator">=</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>max<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>P2669 [NOIP2015 普及组] 金币 题解</title>
    <url>/solutions/P2669%20%5BNOIP2015%20%E6%99%AE%E5%8F%8A%E7%BB%84%5D%20%E9%87%91%E5%B8%81%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p2669-noip2015-普及组-金币-题解"><a class="anchor" href="#p2669-noip2015-普及组-金币-题解">#</a> P2669 [NOIP2015 普及组] 金币 题解</h1>
<p>害，数据点 in 了个 22，之前总是输出 92，想了半个小时才 breakpoint 出来，果然是人老了（雾</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> k<span class="token punctuation">,</span>delta<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    cin<span class="token operator">>></span>k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        i<span class="token operator">+=</span>delta<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        sum<span class="token operator">+=</span>delta<span class="token operator">*</span>delta<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        delta<span class="token operator">++</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    sum<span class="token operator">-=</span><span class="token punctuation">(</span>i<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>delta<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>普及组</tag>
      </tags>
  </entry>
  <entry>
    <title>P2550 [AHOI2001]彩票摇奖 题解</title>
    <url>/solutions/P2550%20%5BAHOI2001%5D%E5%BD%A9%E7%A5%A8%E6%91%87%E5%A5%96%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p2550-ahoi2001彩票摇奖-题解"><a class="anchor" href="#p2550-ahoi2001彩票摇奖-题解">#</a> P2550 [AHOI2001] 彩票摇奖 题解</h1>
<p>挺好的（心态爆炸），题目的 output 没仔细看导致输出的时候中间没输出空格，害，老不审题怪了我</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> res<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        cin<span class="token operator">>></span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token operator">*</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        cin<span class="token operator">>></span>a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">7</span><span class="token operator">*</span>cnt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span><span class="token number">7</span><span class="token operator">-</span>sum<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>e<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>e<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span>res<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>P5723 【深基4.例13】质数口袋 题解</title>
    <url>/solutions/P5723%20%E3%80%90%E6%B7%B1%E5%9F%BA4.%E4%BE%8B13%E3%80%91%E8%B4%A8%E6%95%B0%E5%8F%A3%E8%A2%8B%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p5723-深基4例13质数口袋-题解"><a class="anchor" href="#p5723-深基4例13质数口袋-题解">#</a> P5723 【深基 4. 例 13】质数口袋 题解</h1>
<p>因为看错题目然后改了好久（暴躁）</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> L<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    cin<span class="token operator">>></span>L<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&lt;=</span>L<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            s<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            sum<span class="token operator">+=</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">int</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>     <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>     <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>     <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>P5725 【深基4.习8】求三角形 题解</title>
    <url>/solutions/P5725%20%E3%80%90%E6%B7%B1%E5%9F%BA4.%E4%B9%A08%E3%80%91%E6%B1%82%E4%B8%89%E8%A7%92%E5%BD%A2%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p5725-深基4习8求三角形-题解"><a class="anchor" href="#p5725-深基4习8求三角形-题解">#</a> P5725 【深基 4. 习 8】求三角形 题解</h1>
<p>其实都可以用矩阵来解，但是毕竟是复健，就先用循环锻炼一下自己的思维（虽然自己太笨了没啥可锻炼的就是了（悲）</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    cin<span class="token operator">>></span>a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                cout<span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#125;</span>           </pre></td></tr><tr><td data-num="14"></td><td><pre>            sum<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    sum<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>m<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 控制行数</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"01"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 控制列数 </span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            sum<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>P5726 【深基4.习9】打分 题解</title>
    <url>/solutions/P5726%20%E3%80%90%E6%B7%B1%E5%9F%BA4.%E4%B9%A09%E3%80%91%E6%89%93%E5%88%86%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p5726-深基4习9打分-题解"><a class="anchor" href="#p5726-深基4习9打分-题解">#</a> P5726 【深基 4. 习 9】打分 题解</h1>
<p>简单的求平均值的题面，注意 printf 和 sort 的用法 当然，从 sort 中可以延展出很多排序的方法：冒泡、快速、选择、插入、桶排... 可以自己搜搜</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">float</span> sum<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">float</span> b<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    cin<span class="token operator">>></span>a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        cin<span class="token operator">>></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        sum<span class="token operator">+=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    sum<span class="token operator">=</span>sum<span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">float</span> ave<span class="token operator">=</span>sum<span class="token operator">/</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span>ave<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>P5738 【深基7.例4】歌唱比赛 题解</title>
    <url>/solutions/P5738%20%E3%80%90%E6%B7%B1%E5%9F%BA7.%E4%BE%8B4%E3%80%91%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p5738-深基7例4歌唱比赛-题解"><a class="anchor" href="#p5738-深基7例4歌唱比赛-题解">#</a> P5738 【深基 7. 例 4】歌唱比赛 题解</h1>
<p>技术力太低了，先检讨一下（悲） 代码太冗长了、而且不算上 sort 就已经用了两个循环，时间复杂度应该挺高的吧、本来想练练 c++ 泛型和快排的能力的，但是输出一直不太对，所以放弃了。</p>
<p>看来要多练练排序了（大悲）</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token comment">// 同学，评委...</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">float</span> ave<span class="token punctuation">,</span>sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">float</span> max<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">fill</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        ave<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        sum<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            cin<span class="token operator">>></span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            sum<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>s<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        ave<span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token operator">-</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>b<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        max<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>ave<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token function">sort</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>max<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span>max<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>UVA12096 集合栈计算机 The SetStack Computer 题解</title>
    <url>/solutions/UVA12096%20%E9%9B%86%E5%90%88%E6%A0%88%E8%AE%A1%E7%AE%97%E6%9C%BA%20The%20SetStack%20Computer%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="uva12096-集合栈计算机-the-setstack-computer-题解"><a class="anchor" href="#uva12096-集合栈计算机-the-setstack-computer-题解">#</a> UVA12096 集合栈计算机 The SetStack Computer 题解</h1>
<p>已经很久没编程了，回来重新学习一下，水一篇（指花了整整一天时间看别人的题解啊可恶）</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">INS</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">inserter</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">typedef</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Set<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>map<span class="token operator">&lt;</span>Set<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> IDcache<span class="token punctuation">;</span><span class="token comment">// 集合对应 id，于是可以根据集合找 id </span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span>Set<span class="token operator">></span> Setcache<span class="token punctuation">;</span><span class="token comment">// 可以根据数组下标找集合，设 id 等于数组下标，于是可以 id 找集合 </span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> <span class="token function">ID</span><span class="token punctuation">(</span>Set x<span class="token punctuation">)</span><span class="token comment">// 找集合的 id，有就返回，无就分别在 IDcache 和 SETcache 中创建新的</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>IDcache<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> IDcache<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    Setcache<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> IDcache<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>Setcache<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> main<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span><span class="token comment">// 注意：这个栈里面只存放 id，这题跟集合基本没关系</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token comment">// 试验次数</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">int</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        cin<span class="token operator">>></span>m<span class="token punctuation">;</span><span class="token comment">// 操作次数</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            string op<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            cin<span class="token operator">>></span>op<span class="token punctuation">;</span><span class="token comment">// 操作名称</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'P'</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 压入一个空集的 id (空集 id=0)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'D'</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token comment">//x1、x2、x 是 set，始终记住它们只存放 int 数据，而不是其他 set </span></pre></td></tr><tr><td data-num="34"></td><td><pre>                Set x1<span class="token operator">=</span>Setcache<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                Set x2<span class="token operator">=</span>Setcache<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                <span class="token comment">/*  x 是用于存放处理 x1 和 x2 的结果的 set</pre></td></tr><tr><td data-num="37"></td><td><pre>                    为了保证集合的互异性 */</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                Set x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token comment">// 以下操作均可视作对 id 的操作 </span></pre></td></tr><tr><td data-num="40"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'U'</span><span class="token punctuation">)</span> <span class="token function">set_union</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ALL</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">INS</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'I'</span><span class="token punctuation">)</span> <span class="token function">set_intersection</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ALL</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">INS</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token operator">=</span>x2<span class="token punctuation">;</span>x<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">ID</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">ID</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span>Setcache<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"***"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA136 丑数 Ugly Numbers 题解</title>
    <url>/solutions/UVA136%20%E4%B8%91%E6%95%B0%20Ugly%20Numbers%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="uva136-丑数-ugly-numbers-题解"><a class="anchor" href="#uva136-丑数-ugly-numbers-题解">#</a> UVA136 丑数 Ugly Numbers 题解</h1>
<p>这道题比较简单，注意这题数据比较大，所有变量都要用 longlong。</p>
<p>利用优先数列从小到大保存生成的丑数，用完一个就 pop 一个。</p>
<p>用 set 保存使用过的丑数，便于用 count () 判断新生成的丑数是否已经存在，因为一个丑数可能有几种生成方式 (比如 419430400、629145600 等)</p>
<p>以下是代码：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 从小到大存储生成的丑数，当使用完一个小的丑数后，可以直接 pop 掉 </span></pre></td></tr><tr><td data-num="9"></td><td><pre>priority_queue<span class="token operator">&lt;</span>LL<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>LL<span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>LL<span class="token operator">></span> <span class="token operator">></span> pq<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>set<span class="token operator">&lt;</span>LL<span class="token operator">></span> s<span class="token punctuation">;</span><span class="token comment">// 记录已生成的丑数 </span></pre></td></tr><tr><td data-num="11"></td><td><pre>LL ans<span class="token punctuation">,</span>b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        ans<span class="token operator">=</span>pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"The 1500'th ugly number is "</span><span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">".\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            b<span class="token operator">=</span>ans<span class="token operator">*</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA699 下落的树叶 The Falling Leaves 题解</title>
    <url>/solutions/UVA699-%E4%B8%8B%E8%90%BD%E7%9A%84%E6%A0%91%E5%8F%B6-The-Falling-Leaves-%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="uva699-下落的树叶-the-falling-leaves-题解"><a class="anchor" href="#uva699-下落的树叶-the-falling-leaves-题解">#</a> UVA699 下落的树叶 The Falling Leaves 题解</h1>
<p>这次的题解 markdown 暂时选择用记事本写，写得太难受（悲）</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">1000010</span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> sum<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//p 是当前结点在数组的下标 </span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token keyword">int</span> v<span class="token punctuation">;</span>cin<span class="token operator">>></span>v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	</pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">// 递归出口，到达了结点的底部（等于 - 1 时说明已经超界） </span></pre></td></tr><tr><td data-num="13"></td><td><pre>	 </pre></td></tr><tr><td data-num="14"></td><td><pre>	sum<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span><span class="token comment">// 根 </span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token function">build</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 左 </span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">build</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 右 </span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 因为没给有多少个实验组，因此必须有一个 init 函数来检测每一个字符串的第一位</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 如果第一位是 - 1，则说明程序结束 </span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// 但是由于实验组的第一位同时还要用于建树</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// 因此这个字符串的第一次 “根左右” 不由 build 函数进行，而是由 init 函数在判断 - 1 的同时处理 </span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">bool</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token keyword">int</span> root<span class="token operator">=</span>maxn<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token keyword">int</span> v<span class="token punctuation">;</span>cin<span class="token operator">>></span>v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	</pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token function">memset</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token comment">// 根 </span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 左 </span></pre></td></tr><tr><td data-num="32"></td><td><pre>	<span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 右 </span></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	<span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"下落的树叶.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	<span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"A_out_for_test.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>	cout<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>	cin<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>	<span class="token keyword">int</span> T<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		<span class="token comment">// 因为题意要求从树的最左端到最右端输出，需要有一个光标 p 从最左端开始 </span></pre></td></tr><tr><td data-num="45"></td><td><pre>		<span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>		<span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 将光标移到树的最左边（因为树的结点都不是 0）</span></pre></td></tr><tr><td data-num="47"></td><td><pre>		cout<span class="token operator">&lt;&lt;</span><span class="token string">"Case "</span><span class="token operator">&lt;&lt;</span><span class="token operator">++</span>T<span class="token operator">&lt;&lt;</span><span class="token string">":\n"</span><span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 防止 endl 换行后上一行留个空格，下一行同时先输出一个结点 </span></pre></td></tr><tr><td data-num="48"></td><td><pre>		<span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出剩下的结点 </span></pre></td></tr><tr><td data-num="49"></td><td><pre>		cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n\n"</span><span class="token punctuation">;</span><span class="token comment">// 每一个实验组输出完后有两个换行 </span></pre></td></tr><tr><td data-num="50"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>	</pre></td></tr><tr><td data-num="52"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>FINALx的单推记录（雾）(updating)</title>
    <url>/vtubers-vups/single_push/</url>
    <content><![CDATA[<p>注 1：为了突出自己确实是灵活的单推，这个记录我就灵活地少写一些 Vtb XD</p>
<p>注 2：排名不分先后</p>
<h2 id="绫奈奈奈-ayana-nana"><a class="anchor" href="#绫奈奈奈-ayana-nana">#</a> 绫奈奈奈 Ayana nana</h2>
<p>人生哲学：如果你注意到了，那就注意到了，如果你没有注意到，<s>那么就没有注意到</s> 那么我会提醒你这个网站的左上角就是 Ayana nana</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMTg2NDY=">她的 bilibili 首页</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saXZlLmJpbGliaWxpLmNvbS8zMzA=">她的 bilibili 直播间</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC5tb2VnaXJsLm9yZy5jbi8lRTclQkIlQUIlRTUlQTUlODglRTUlQTUlODglRTUlQTUlODg=">她的萌娘百科</span> (仅用于 PC 端)</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9temgubW9lZ2lybC5vcmcuY24vJUU3JUJCJUFCJUU1JUE1JTg4JUU1JUE1JTg4JUU1JUE1JTg4">她的萌娘百科</span> (PC 端和 Mobile 端兼容)</li>
</ul>
<h2 id="早稻叽"><a class="anchor" href="#早稻叽">#</a> 早稻叽</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMTk1MDY1OA==">她的 bilibili 首页</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saXZlLmJpbGliaWxpLmNvbS82MzE=">她的 bilibili 直播间</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC5tb2VnaXJsLm9yZy5jbi8lRTYlOTclQTklRTclQTglQkIlRTUlOEYlQkQ=">她的萌娘百科</span> (仅用于 PC 端)</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9temgubW9lZ2lybC5vcmcuY24vJUU2JTk3JUE5JUU3JUE4JUJCJUU1JThGJUJE">她的萌娘百科</span> (PC 端和 Mobile 端兼容)</li>
</ul>
<h2 id="犬山玉姬"><a class="anchor" href="#犬山玉姬">#</a> 犬山玉姬</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMTIzNjI0NTE=">她的 bilibili 首页</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saXZlLmJpbGliaWxpLmNvbS80NjM0MTY3">她的 bilibili 直播间</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC5tb2VnaXJsLm9yZy5jbi8lRTclOEElQUMlRTUlQjElQjElRTclOEUlODklRTUlQTclQUM=">她的萌娘百科</span> (仅用于 PC 端)</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9temgubW9lZ2lybC5vcmcuY24vJUU3JThBJUFDJUU1JUIxJUIxJUU3JThFJTg5JUU1JUE3JUFD">她的萌娘百科</span> (PC 端和 Mobile 端兼容)</li>
</ul>
<h2 id="冰糖io"><a class="anchor" href="#冰糖io">#</a> 冰糖 IO</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMTk4Mjk3">她的 bilibili 首页</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saXZlLmJpbGliaWxpLmNvbS9ibGFja2JvYXJkL2FjdGl2aXR5LXZ2emdJZFZWYWkuaHRtbA==">她的 bilibili 直播间</span> (目前企划中)</li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC5tb2VnaXJsLm9yZy5jbi8lRTUlODYlQjAlRTclQjMlOTZJTw==">她的萌娘百科</span> (仅用于 PC 端)</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9temgubW9lZ2lybC5vcmcuY24vJUU1JTg2JUIwJUU3JUIzJTk2SU8=">她的萌娘百科</span> (PC 端和 Mobile 端兼容)</li>
</ul>
]]></content>
      <categories>
        <category>FINALx的单推日记</category>
      </categories>
      <tags>
        <tag>缓慢更新系列</tag>
      </tags>
  </entry>
  <entry>
    <title>P5724 【深基4.习5】求极差 / 最大跨度值 题解</title>
    <url>/solutions/%E6%9C%80%E5%A4%A7%E8%B7%A8%E5%BA%A6%E5%80%BC%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p5724-深基4习5求极差-最大跨度值-题解"><a class="anchor" href="#p5724-深基4习5求极差-最大跨度值-题解">#</a> P5724 【深基 4. 习 5】求极差 / 最大跨度值 题解</h1>
<p>老蒟蒻了我，这是我的第一份准备提交的题解，然后因为数量够了所以提交不了。。。</p>
<p>其实加上数组也不是很难写，再加上技术力不够（悲），所以就这么写了</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> b<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    cin<span class="token operator">>></span>b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 第一次 </span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 第二次及以后</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span> max<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span> min<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>max<span class="token operator">-</span>min<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token operator">~</span><span class="token operator">~</span>话说真的没有人看到么。。。输入样例好臭啊（昏厥）<span class="token operator">~</span><span class="token operator">~</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
</search>
